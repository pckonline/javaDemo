IO流用来处理设备之间的数据传输

将外设中的数据读取到内存中：输入。
将内存中的数据写入到外设中：输出。

字符流的由来：
其实就是字节流读取字节数据后，不直接操作而是先查指定的编码表，获取对应的文字再对这个文字进行操作
简单说：字符流=字节流+编码表

------------------------------------------------------------
字节流的两个顶层父类：
1.InputStream  2.OutputStream

字符流的两个顶层父类
1.Reader  2.Writer

这些体系的子类都以父类名作为后缀。
而子类名的前缀就是该对象的功能。


就从熟悉的文字开始，就是字符流。

//需求：将一些文字存储到硬盘的一个文件中
记住：如果操作一些文字数据，建议先考虑字符流
而且要将数据从内存写到硬盘中，要使用字符流中的输出流  Writer
硬盘的数据基本体现是文件，希望可以找到一个可以操作文件的Writer

找到了FileWriter

//读取一个文本文件，将读取的数据打印到控制台中
找到了FileReader

装饰设计模式：
    对一组对象的功能进行增强时，就可以使用这种模式进行问题的解决

装饰设计和继承都能实现的一特点：进行功能的扩展功能
有什么区别呢？
首先有一个继承体系
Writer
    |--TextWriter：用于操作文本
    |--MediaWriter：用于操作媒体
想要对操作的效率进行提高
按照面向对象，可以通过继承对具体的功能进行扩展
Writer
    |--TextWriter：用于操作文本
        |--BufferTextWriter：加入了缓冲技术的操作问题的对象
    |--MediaWriter：用于操作媒体
        |--BufferMediaWriter：加入了缓冲技术的操作问题的对象
如果这个体系进行功能拓展，又多了流对象
那么这个流要提高效率，是不是也要产生子类？是，这时就会发现只为了提高功能，进行的继承
导致继承体系越来越臃肿。不够灵活。

既然加入的都是同一种技术--缓冲
前一种是让缓冲和具体的流对象相结合
可不可以将缓冲进行单独的封装，那个对象需要缓冲，就将那个对象和缓冲关联
class Buffer{
    Buffer(Writer w){}
}
Writer
    |--TextWriter：用于操作文本
    |--MediaWriter：用于操作媒体
    |--BufferWriter:用于提高效率
装饰比继承灵活。

特点：装饰类和被装饰类都必须要属于同一个接口或者父类

---------------------------------------------
转换流：
InputStreamReader：字节到字符的桥梁，解码
OutputStreamWriter：字符到字节的桥梁，编码

流的操作规律：
之所以要弄清这个规律，是因为流太多，开发时不知道那个对象合适。
想要知道开发时用到那个对象，只要四个明确即可

1.明确源和目的(汇)
    源：InputStream  Reader
    目的：OutputStream Writer

2.明确数据是否是存文本的数据
    源是文本：Reader
        不是文本：InputStream
    目的是文本：Writer
        不是文本：OutputStream

    到这里就明确需求中具体需要那个体系
3.明确具体的设备
    源设备：
        1.硬盘：File
        2.键盘：System.in
        3.内存：数组.
        4.网络：Socket流
    目的设备
        1.硬盘：File
        2.控制台：System.out
        3.内存：数组
        4.网络：Socket流
4.是否需要其他额外功能。
    比如，是否需要高效（缓冲区）
        是就加上Buffer。
    转换


1.需求：复制一个文本文件
    1.明确源和目的
        源：InputStream Reader
        目的：OutputStream Writer
    2.是否是纯文本
        是：源 Reader  目的：Writer
    3.明确设备
        源：硬盘：File
        目的：硬盘：File
        FileReader fr = new FileReader("a.txt");
        FileWriter fw = new FileWriter("b.txt");
        4.需要额外功能？
            需要：需要高效;
            BufferedReader br = new BufferedReader(new FileReader("a.txt"));
            BufferedWriter bw = new BufferedWriter(new FileReader("b.txt"));

2.需求：读取键盘录入信息并写入到一个文件中
    1.源和目的
        源：InputStream Reader
        目的：OutputStream Writer
    2.是否是纯文本？
        是 源：Reader
        目的：Writer
    3.明确设备
        源：键盘：System.in
        目的：硬盘：File
        InputStream is = System.in;
        FileWriter fw = new FileWriter("b.txt");
    4.是否需要提高效率
        需要转换,将字节流转换成字符流
        InputStreamReader isr = new InputStreamReader(is);

        还需要功能
        高效：BufferedReader br = new BufferedReader(isr);
        BufferedWriter bw = new BufferedWriter(fw);

3.需求：将一个文本文件数据显示到控制台上
        1.源和目的
            源：InputStream Reader
            目的：OutputStream Writer
        2.是否是纯文本？
            是 源：Reader
            目的：Writer
        3.明确具体设备
            源：硬盘：File
            目的：控制台：System.out
            FileReader fr = new FileReader("a.txt");
            OutputStream os = System.out;//PrintStream
        4.是否需要功能
            需要：OutputStreamWriter osw = new OutputStreamWriter(os);
            提高效率
            BufferedReader br = new BufferedReader(fr);
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out))
4.需求：读取键盘录入，显示在控制台上
        1.源和目的
            源：InputStream Reader
            目的：OutputStream Writer
        2.是否是纯文本？
            是 源：Reader
            目的：Writer
        3.明确设备：
            源 键盘：System.in
            目的 控制台：System.out
        InputStream in =System.in;
        OutputStream out = System.out;
        4.明确额外功能
            需要转换：因为都是字节流，但是需要操作的是文本数据
            所以使用字符流更加简便
            InputStreamRead isr = new InputStreamReader(System.in)
            OutputStreamRead isr = new OutputStreamRead(System.out)

            为了将其高效
            BufferReader br = new BufferedReader(new InputStreamReader(System.in));
            BufferWriter bw = new BufferedWriter(new OutputStreamRead(System.out));

------------------------------------------------------------------------
important:
5:将一个指定的中文字符串按指定的编码表写入一个文本文件中。
    1.目的：OutputStream,Writer
    2.纯文本:Writer
    3.设备：硬盘：File
    FileWriter fw = new FileWriter();
    fw.writer("你好")

    注意：既然需求中已经明确指定了编码表的动作
    那就不可以使用FileWriter，因为FileWriter使用的是本地默认的编码表
    只能使用其父类OutputStreamWriter。
    OutputStreamWriter接收一个字节输出流对象，既然是操作文件，就使用FileOutputStream
    OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("xx.txt"),"utf-8")
    需要高效么
    BufferedWriter bw = new BufferedWriter(osw);

什么时候使用转换流呢？

    源或者目的对应的设备是字节流，但是操作的却是文本数据，可以使用转换流作为桥梁
    提高操作文本的效率
    2.一旦操作文本涉及到编码表时，必须使用转换流


